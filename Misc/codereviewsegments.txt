// DAQ.ino (Segment)
/*
 * Arduino DAQ Code
 * 
 * Created: 
 * 7/26/2023 by Siem Yonas
 * Last Modified: 
 * 8/5/2023 by Siem Yonas
 */
 
#include <ArduinoBLE.h>
#include <SPI.h>
#include <SD.h>
#include "Arduino.h"
#include "uRTCLib.h"
#include <UnixTime.h>

#define USE_ARDUINO_INTERRUPTS false
#include <PulseSensorPlayground.h>

// Global vars and constants

// BLE 
BLEService hrvService("180F"); // BLE HRV service

BLECharacteristic hrvChar("2A19", BLERead | BLENotify, 8); // Bluetooth Low Energy Characteristic to send HRV records
BLEByteCharacteristic errorChar("2A1A", BLERead | BLENotify); // Bluetooth Low Energy Characteristic to send error codes to device application
BLECharacteristic requestChar("2A1B", BLERead | BLEWrite, 4); // Bluetooth Low Energy Characteristic to receive data requests from device application

bool transferInProgress; // Whether a data transfer is currently in progress
unsigned long lastTransferTime; // Millisecond of last transfer
const unsigned long TRANSFER_TIMEOUT = 250; // Number of milliseconds between each data transfer

File transferFile; // Current file used in data transfer
uint16_t transferDate[3]; // Current transfer date
char transferFilename[17]; // Current transfer filename
uint32_t transferFilePosition; // Current read position in the current transfer file

BLEDevice connectedDevice; // Current connected device central device, which should be the device application

// SD
const int CHIP_SELECT = 10; // Digital pin for the SD card's chip select 

// RTC
uRTCLib rtc(0x68); // uRTCLib library object
UnixTime stamp(0); // Unix timestamp converter 

// Pulse Sensor
const int PULSE_INPUT = A0; // Analog pin for pulse sensor
const int THRESHOLD = 550; // Threshold for pulse sensor signal for the PulseSensorPlayground library
PulseSensorPlayground pulseSensor; // PulseSensorPlayground library object

// HRV Calculation
float rmssd; // The calculated RMSSD in ms (the "HRV Metric")
float rrDiffSquaredTotal; // Intermediate value for calculating RMSSD (numerator under the radical) 
int numRRDetected; // Counter for the number of RR intervals found in the measurement period

const int MINUTES_IN_WINDOW = 1; // The number of minutes to be used in a measurement window
const int BEATS_TIL_MEASURE = 5; // Number of heartbeats to detect before measurement
int beatsRemaining; // Current number of heartbeats remaining before starting a measurement

unsigned long hrvStartTime; // Millisecond where the HRV measurement began
unsigned long lastPeakTime; // Millisecond where the last peak was found
int lastRRInterval; // Duration of the last RR interval in milliseconds.

...

// Sends HRV records to the device application. Returns 1 on failure to open, and 0 for no errors.
int sendRecords() {

  uint32_t now = getUnixEpochTime();
  
  // If the transferFile is not open, open the next available day
  while (!transferFile){
    // Get the next date time stamp
    stamp.setDateTime(transferDate[0], transferDate[1], transferDate[2], 0, 0, 0);
    stamp.getDateTime(stamp.getUnix() + 86400);

    transferDate[0] = stamp.year;
    transferDate[1] = stamp.month;
    transferDate[2] = stamp.day;
    
    uint32_t next_day = stamp.getUnix();

    // If no more days exist, end file transfer and return.
    if (next_day > now) {
      transferInProgress = false;
      Serial.println("Data transfer Done!");
      return 1;
    }

    setFilename(transferFilename, transferDate[0], transferDate[1], transferDate[2]);

    if (SD.exists(transferFilename)){
      transferFilePosition = 0;
      transferFile = SD.open(transferFilename);
    }
  }

  // Read the next record from the transferFile 
  transferFile.seek(transferFilePosition);

  char record[19];
  transferFile.read(record, 19);

  Serial.print("Sending: ");
  Serial.println(record);

  // Parse record
  uint32_t unix;
  float transferRmssd;
  sscanf(record, "%10d %6.2f\n", unix, transferRmssd);

  // Pack record into HRV format and write to hrvChar
  uint8_t hrvValue[8];
  *((uint32_t*) hrvValue) = unix;
  *((float*) (hrvValue+4)) = transferRmssd;

  hrvChar.writeValue(hrvValue, 8);
  lastTransferTime = millis();

  // Update transferFilePosition
  transferFilePosition = transferFile.position() + 1;

  // Check if EOF, close file if so
  if (transferFilePosition >= transferFile.size()) {
    transferFile.close();
  }
    
  return 0;
}

// Stores current HRV record to the SD card.
void storeRecord() {
  // Close transferFile, since only one file can be open at a time from SD
  if (transferInProgress)
    transferFile.close();
  
  // Get the current Unix timestamp
  uint32_t unix = getUnixEpochTime();

  // Get the current day data filename
  char storageFilename[17];
  setFilename(storageFilename);
  Serial.println(storageFilename);


  Serial.println(SD.exists(storageFilename));
  // Open current day data file for writing
  File storageFile = SD.open(storageFilename, FILE_WRITE);

  
  // Format a record
  char record[19];
  snprintf(record, 19, "%10d %6.2f\n", unix, rmssd);
  Serial.print(record);
  Serial.println("?");

  // Write record to file and close the file
  int n = storageFile.write(record, 19);
  Serial.println(n);
  
  storageFile.close();
  
  // Pack record into HRV format and write to hrvChar
  uint8_t hrvValue[8];
  *((uint32_t*) hrvValue) = unix;
  *((float*) (hrvValue+4)) = rmssd;

  hrvChar.writeValue(hrvValue, 8);

  lastTransferTime = millis();

  // Reopen transferFile
  if (transferInProgress)
    transferFile = SD.open(transferFilename);
}

...

// DataHook.tsx

import { BleClient, numberToUUID } from "@capacitor-community/bluetooth-le";
import { Preferences } from "@capacitor/preferences";
import { Directory, Filesystem, Encoding } from "@capacitor/filesystem";

const DEVICE_ID = "device_id" // Preference ID for Device Wearable ID.

// BLE Service and Characteristic UUIDs
const HRV_SERVICE = numberToUUID(0x180F); // Bluetooth Low Energy HRV Metric Service UUID
const HRV_CHARACTERISTIC = numberToUUID(0x2A19); // Bluetooth Low Energy Characteristic UUID (receive HRV records from device wearable)
const ERROR_CHARACTERISTIC = numberToUUID(0x2A1A); // Bluetooth Low Energy Characteristic UUID (receive error codes from device wearable)
const REQUEST_CHARACTERISTIC = numberToUUID(0x2A1B); // Bluetooth Low Energy Characteristic UUID (send data requests to device wearable)

/* 
 * Hook responsible for handling and maintaining connections with the device wearable. 
 * Takes in callbacks array, which assigns these functions to occur when their respective BLE characteristic is written to by the device wearable
 */   
export const dataHook = async (callbacks:Array<(value:DataView) => void>) => {
    try {
        await BleClient.initialize(); // Start the BleClient at the beginning of the program
        
        // Disconnect from any previous connections
        const connections = await BleClient.getConnectedDevices([HRV_SERVICE]);
        connections.forEach(async (connection) => {
            await BleClient.disconnect(connection.deviceId);
        })

        var connected = false; // Bluetooth connection state
        var id: string; // BLE peripheral device id (the Device Wearable)

        // While not connected:
        do {
            
            // Check the saved preference for a Device Wearable ID
            const {value} = await Preferences.get({key: DEVICE_ID});

            if (value) {
                // If there is a Device Wearable ID stored in preferences, use the saved ID
                id = value;
            }
            else {
                // Else, Search for a device to connect to and save its ID to the preference.
                const device = await BleClient.requestDevice({
                    services: [HRV_SERVICE]
                })
                
                id = device.deviceId;
                await Preferences.set( {key: DEVICE_ID, value: id});
            }
            
            // Attempt to connect to the device wearable 5 times.
            var attempts = 0;
            while (!connected && attempts < 5) {
                try {
                    await BleClient.connect(id, () => onDisconnect());
                    connected = true;

                } catch (error) {
                    attempts++;
                }
            }

            // If the Device Wearable fails to connect, clear the saved ID preference
            if (!connected) {
                await Preferences.remove({key: DEVICE_ID});
            }

        } while (!connected);

        // Start Notifications for the HRV and Error Characteristics
        // Updates to the HRV Characteristic should trigger the first callback
        // Updates to the Error Characteristic should trigger the second callback 
        await BleClient.startNotifications(
            id,
            HRV_SERVICE,
            HRV_CHARACTERISTIC,
            callbacks[0]
        );

        await BleClient.startNotifications(
            id,
            HRV_SERVICE,
            ERROR_CHARACTERISTIC,
            callbacks[1]
        );
        
        // TODO: save the current last record read to effeciently recall records.
        // Get the time stamp for last week
        const lastWeekDate = new Date(Date.now() - 6.048e+8);
        
        /* 
         * Pack the Request Characteristic into its format
         * 
         * YYMD
         * Y: Year: uint16
         * M: Month: uint8
         * D: Day: uint8
         * 
         * Arduino is little endian, so read and write to the DataView with the little endian flag set for multibyte datatypes.
         */
        
        // Create an ArrayBuffer
        const buffer = new ArrayBuffer(4);
        
        // Create a DataView for bit manipulation
        const view = new DataView(buffer);
        
        // Format the request data into the DataView
        view.setUint16(0, lastWeekDate.getUTCFullYear(), true);
        view.setUint8(2, lastWeekDate.getUTCMonth());
        view.setUint8(3, lastWeekDate.getUTCDate());
        
        // Write a Records Request to the Request Characteristic
        await BleClient.write(
            id,
            HRV_SERVICE,
            REQUEST_CHARACTERISTIC,
            view
        )


    } catch (error) {
        // Log errors to console
        console.error(error);
        
        // TODO: Put Local notification

        // Reset the dataHook after 30 seconds
        //setTimeout(() => dataHook(callbacks), 30000);
    }

    // Callback for when the BleClient disconnects. Resets the dataHook.
    function onDisconnect(): void {
        dataHook(callbacks);
    }
}

/*
 * Retrieves records from device application storage. 
 * Takes in an amount of seconds, which denotes how long ago to look back. 
 * Returns the found records in an array.
 */
export const fetchRecords = async(timePeriod:number): Promise<number[][]> => {
    var rawData = ""; // String holding the raw content of all the files the function reads.

    const endingTimestamp = Date.now(); // Timestamp to stop search, the current timestamp

    const startTimestamp = endingTimestamp - timePeriod*1000; // Starting timestamp is {timePeriod} seconds ago

    console.log(new Date(startTimestamp));
    console.log(new Date(endingTimestamp));

    const {files} = await Filesystem.readdir({
        path:"",
        directory:Directory.Data
    });
  
    console.log("Bruh:", files.map(file => file.name))

    var currentTimestamp = startTimestamp; // The current timestamp as the loop control variable.
    
    while (currentTimestamp <= endingTimestamp) {
        // Get the currentTimestamp's year, month, and day to make the HRV day data file filename
        const currentDatetime = new Date(currentTimestamp); 
        
        const year = currentDatetime.getUTCFullYear().toString().padStart(4, '0');
        const month = (currentDatetime.getUTCMonth()+1).toString().padStart(2, '0');
        const day = currentDatetime.getUTCDate().toString().padStart(2, '0');

        const filename = `HRV-${year}${month}${day}.txt`;
        
        // Attempt to read from the current day data file
        // If it exist, append its content to the raw data string
        // Else, log FileNotFound error
        try {
            const contents = await Filesystem.readFile({
                path: filename,
                directory: Directory.Data,
                encoding: Encoding.UTF8,
            });
            rawData += contents.data
        } catch (error) {
            console.error(`${filename} doesn't exist`)
        }

        // Increment timestamp by 1 day
        currentTimestamp += 8.64e+7;
    }

    var records: number[][] = []; // Formatted Records array
    
    // If there is data, parse it. 
    if (rawData != ""){
        
        // Split each record (separated by newline character) and split numbers within each record (separated by a single space) 
        const allRecords = rawData.split("\n").map(element => element.split(' ').map(e => Number(e)));
        
        // Remove records with timestamps outside of the range [startTimestamp, endingTimestamp]
        records = allRecords.filter((row) => row[0] >= startTimestamp/1000 && row[0] <= endingTimestamp/1000);

        // Sort records for convenience.
        records.sort((record1, record2) => record1[0] - record2[1]);
    }

    console.log(records);
    return records;
}
